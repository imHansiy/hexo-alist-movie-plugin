<style>
  :root{
    --page-max: 1600px;
    --gap: 20px;
    --radius-xl: 16px;
    --radius-lg: 12px;
    --radius-md: 10px;
    --bg: #ffffff;
    --bg-soft: #f7f8fa;
    --text: #1f2937;
    --muted: #6b7280;
    --border: #e5e7eb;
    --primary: #2563eb;
    --primary-600: #1d4ed8;
    --primary-700: #1e40af;
    --shadow-sm: 0 2px 10px rgba(0,0,0,.06);
    --shadow-md: 0 18px 36px rgba(0,0,0,.14);
    --success-bg:#d1fae5; --success-fg:#065f46; --success-bd:#a7f3d0;
    --warn-bg:#fef3c7; --warn-fg:#92400e; --warn-bd:#fde68a;
    --fail-bg:#fee2e2; --fail-fg:#991b1b; --fail-bd:#fecaca;
  }
  @media (prefers-color-scheme: dark){
    :root{
      --bg:#0b1220;
      --bg-soft:#0f172a;
      --text:#e5e7eb;
      --muted:#9ca3af;
      --border:#1f2a44;
      --shadow-sm: 0 2px 10px rgba(0,0,0,.35);
      --shadow-md: 0 18px 36px rgba(0,0,0,.5);
    }
  }

  /* 全宽：隐藏侧栏，主区满宽 */
  #sidebar,
  .sidebar,
  .widget-wrap,
  .aside,
  .right-sidebar,
  .secondary,
  .col-sidebar,
  .sidebar-container{
    display:none!important; visibility:hidden!important; width:0!important; opacity:0!important;
  }
  #main,.main,.content,.main-content,.primary,.col-main,.content-container{
    width:100%!important; max-width:100%!important; float:none!important; margin:0 auto!important; padding-left:0!important; padding-right:0!important;
  }
  .container-root{ max-width:var(--page-max); margin:24px auto; padding:0 20px; }

  .header-card{
    background:linear-gradient(135deg, var(--primary) 0%, var(--primary-600) 100%);
    color:#fff; border-radius:var(--radius-xl); padding:20px; box-shadow:var(--shadow-md);
    display:flex; align-items:center; justify-content:space-between; gap:10px;
  }
  .title-wrap h1{ margin:0; font-size: clamp(1.6rem, 1.2rem + 1.2vw, 2.1rem); font-weight:900; letter-spacing:.01em; }
  .title-wrap p{ margin:6px 0 0; opacity:.9; font-weight:600; }
  .back-button{
    appearance:none;display:inline-flex;align-items:center;justify-content:center;height:38px;padding:0 14px;border-radius:10px;
    border:1px solid var(--border);background:var(--bg-soft);color:var(--text);text-decoration:none;font-weight:700;gap:8px;
    box-shadow:none;transition:background .15s ease,border-color .15s ease,transform .1s ease;
  }
  .back-button:hover{ background:#eef2ff; border-color:#c7d2fe; color:#1e3a8a; transform: translateY(-1px); }

  .stats-card, .filters-card, .table-card{
    background:var(--bg); border:1px solid var(--border); border-radius:var(--radius-xl); box-shadow:var(--shadow-sm);
  }
  .stats-card{ margin-top:14px; padding:16px; }
  .stats{ display:flex; flex-wrap:wrap; gap:20px; }
  .stat-item{ min-width:160px; text-align:center; }
  .stat-number{ font-size:1.6rem; font-weight:900; color:#1e3a8a; }
  .stat-label{ color:var(--muted); font-weight:700; }

  .filters-card{ margin-top:14px; padding:14px; }
  .filter-group{ display:flex; flex-wrap:wrap; gap:10px; align-items:center; }
  .filter-btn{
    padding:8px 12px; border-radius:999px; font-weight:800; background:var(--bg-soft); border:1px solid var(--border); color:var(--text); cursor:pointer;
    transition:.18s ease;
  }
  .filter-btn:hover{ background:#eef2ff; border-color:#c7d2fe; color:#1e3a8a; transform: translateY(-1px); }
  .filter-btn.active{ background:#1e3a8a; color:#fff; border-color:#1e3a8a; }
  .search-box{
    flex:1; min-width:240px; height:38px; padding:0 12px; border-radius:10px; border:1px solid var(--border); background:var(--bg); color:var(--text); font-weight:700;
  }

  .table-card{ margin-top:14px; padding:0; overflow:hidden; }
  .table-scroll{ overflow-x:auto; max-height:70vh; }
  table.comparison-table{ width:100%; border-collapse:collapse; table-layout:fixed; font-weight:700; }
  .comparison-table th{
    position:sticky; top:0; z-index:2;
    background:var(--bg-soft); color:var(--text); text-align:left; border-bottom:2px solid var(--border);
    padding:12px; font-weight:900;
  }
  .comparison-table td{ padding:12px; border-bottom:1px solid var(--border); vertical-align:top; color:var(--text); }
  .comparison-table tr:hover td{ background:rgba(99,102,241,.06); }

  .poster-thumb{
    width:200px !important; height:300px !important; object-fit:cover; border-radius:12px; box-shadow:var(--shadow-sm); border:1px solid var(--border);
  }
  .file-name{
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    background:var(--bg-soft); padding:4px 8px; border-radius:8px; display:inline-block; border:1px solid var(--border);
  }
  .identified-name{ font-weight:900; }

  .media-type{ display:inline-block; padding:4px 10px; border-radius:999px; font-size:.8rem; font-weight:900; }
  .media-type.movie{ background:#dbeafe; color:#1e3a8a; border:1px solid #bfdbfe; }
  .media-type.tv{ background:#f3e8ff; color:#6d28d9; border:1px solid #e9d5ff; }

  .match-status{ display:inline-block; padding:4px 10px; border-radius:999px; font-size:.8rem; font-weight:900; }
  .match-status.success{ background:var(--success-bg); color:var(--success-fg); border:1px solid var(--success-bd); }
  .match-status.partial{ background:var(--warn-bg); color:var(--warn-fg); border:1px solid var(--warn-bd); }
  .match-status.failed{ background:var(--fail-bg); color:var(--fail-fg); border:1px solid var(--fail-bd); }

  .vote-average{ display:flex; align-items:center; gap:6px; }
  .rating-star{ color:#f59e0b; }

  .no-results{
    text-align:center; padding:40px 20px; color:var(--muted); font-weight:800;
  }

  @media (max-width: 768px){
    .stat-item{ min-width:120px; }
  }
</style>

<%
// 从页面路径推断路由基准（避免硬编码 /movies/）
var routeBase = (page && page.path) ? String(page.path).replace(/\/?comparison\.html$/,'').replace(/\/+$/,'') : 'movies';
%>

<div class="container-root">
  <div class="header-card">
    <div class="title-wrap">
      <h1>🎬 文件识别对比</h1>
      <p>对比 Alist 原始文件名与 TMDb 识别结果</p>
    </div>
    <a class="back-button" href="/<%= routeBase %>/" title="返回列表">← 返回列表</a>
  </div>

  <div class="stats-card">
    <div class="stats">
      <div class="stat-item">
        <div class="stat-number" id="totalFiles">0</div>
        <div class="stat-label">总文件数</div>
      </div>
      <div class="stat-item">
        <div class="stat-number" id="movieCount">0</div>
        <div class="stat-label">电影</div>
      </div>
      <div class="stat-item">
        <div class="stat-number" id="tvCount">0</div>
        <div class="stat-label">电视剧</div>
      </div>
      <div class="stat-item">
        <div class="stat-number" id="successRate">0%</div>
        <div class="stat-label">识别成功率</div>
      </div>
    </div>
  </div>

  <div class="filters-card">
    <div class="filter-group">
      <button class="filter-btn active" data-filter="all">全部</button>
      <button class="filter-btn" data-filter="movie">电影</button>
      <button class="filter-btn" data-filter="tv">电视剧</button>
      <button class="filter-btn" data-filter="success">识别成功</button>
      <button class="filter-btn" data-filter="failed">识别失败</button>
      <input type="text" class="search-box" placeholder="搜索文件名或识别结果..." id="searchInput">
    </div>
  </div>

  <div class="table-card">
    <div class="table-scroll">
      <table class="comparison-table">
        <thead>
          <tr>
            <th style="width: 240px; min-width: 240px;">封面</th>
            <th style="width: 35%;">原始文件名</th>
            <th style="width: 25%;">识别结果</th>
            <th style="width: 15%;">类型/季集</th>
            <th style="width: 10%;">评分</th>
            <th style="width: 15%;">匹配状态</th>
          </tr>
        </thead>
        <tbody id="comparisonTableBody"></tbody>
      </table>
    </div>
    <div class="no-results" id="noResults" style="display:none;">
      <div style="font-size:3rem; line-height:1;">🔍</div>
      <div style="margin-top:8px;">没有找到匹配的结果，尝试调整搜索或筛选</div>
    </div>
  </div>
</div>

<script type="application/json" id="movies-json"><%- JSON.stringify(movies).replace(/<\/script/g,'<\\/script') %></script>
<script>
  const moviesData = JSON.parse(document.getElementById('movies-json').textContent);

  function escapeHtml(str) {
    if (str == null) return '';
    return String(str)
      .replace(/&/g, '&')
      .replace(/</g, '<')
      .replace(/>/g, '>')
      .replace(/"/g, '"')
      .replace(/'/g, '&#39;');
  }

  function pad2(n){ var s=String(n||0); return s.padStart ? s.padStart(2,'0') : ('0'+s).slice(-2); }

  let allFiles = [];
  let filteredFiles = [];

  function initializeData(){
    allFiles = [];
    moviesData.forEach(function(movie){
      (movie.files || []).forEach(function(file){
        allFiles.push({
          originalName: file.name,
          identifiedName: movie.title,
          mediaType: movie.media_type,
          posterPath: movie.poster_path,
          voteAverage: movie.vote_average || 0,
          season: file.season,
          episode: file.episode,
          path: file.path,
          matchStatus: getMatchStatus(file.name || '', movie.title || '')
        });
      });
    });
    filteredFiles = allFiles.slice();
    updateStats();
    renderTable();
  }

  function getMatchStatus(fileName, identifiedName){
    var cleanFileName = String(fileName).replace(/\.[^.]+$/, '').toLowerCase();
    var cleanIdentifiedName = String(identifiedName).toLowerCase();
    if (cleanFileName.indexOf(cleanIdentifiedName) !== -1 || cleanIdentifiedName.indexOf(cleanFileName) !== -1) {
      return 'success';
    }
    var fileWords = cleanFileName.split(/[\s\-_\.]+/);
    var identifiedWords = cleanIdentifiedName.split(/[\s\-_\.]+/);
    var matchCount = 0;
    fileWords.forEach(function(word){
      if (word.length > 1 && identifiedWords.some(function(iw){ return iw.indexOf(word)!==-1 || word.indexOf(iw)!==-1; })) matchCount++;
    });
    if (matchCount > 0) return 'partial';
    return 'failed';
  }

  function updateStats(){
    var totalFiles = allFiles.length;
    var movieCount = allFiles.filter(function(f){ return f.mediaType === 'movie'; }).length;
    var tvCount = allFiles.filter(function(f){ return f.mediaType === 'tv'; }).length;
    var successCount = allFiles.filter(function(f){ return f.matchStatus === 'success'; }).length;
    var successRate = totalFiles>0 ? Math.round(successCount*100/totalFiles) : 0;

    document.getElementById('totalFiles').textContent = totalFiles;
    document.getElementById('movieCount').textContent = movieCount;
    document.getElementById('tvCount').textContent = tvCount;
    document.getElementById('successRate').textContent = successRate + '%';
  }

  function renderTable(){
    var tbody = document.getElementById('comparisonTableBody');
    var noResults = document.getElementById('noResults');
    if (!tbody) return;

    if (filteredFiles.length === 0){
      tbody.innerHTML = '';
      noResults.style.display = 'block';
      return;
    }
    noResults.style.display = 'none';

    var rows = [];
    filteredFiles.forEach(function(file){
      var posterHtml = file.posterPath
        ? '<img loading="lazy" src="https://image.tmdb.org/t/p/w200' + file.posterPath + '" alt="封面" class="poster-thumb" onerror="this.onerror=null; this.src=\'/static/no_cover.png\'">'
        : '<img loading="lazy" src="/static/no_cover.png" alt="无封面" class="poster-thumb">';
      var seasonEpisode = (file.season || file.episode)
        ? '<div style="color:var(--muted); font-weight:800; margin-top:6px;">S' + pad2(file.season||0) + 'E' + pad2(file.episode||0) + '</div>'
        : '';
      var ratingHtml = (file.voteAverage > 0)
        ? '<div class="vote-average"><span class="rating-star">⭐</span><span>' + file.voteAverage.toFixed(1) + '</span></div>'
        : '<span style="color: var(--muted);">暂无评分</span>';
      var matchText = (file.matchStatus==='success') ? '✅ 完全匹配' : (file.matchStatus==='partial') ? '⚠️ 部分匹配' : '❌ 匹配失败';

      rows.push(
        '<tr>' +
          '<td>' + posterHtml + '</td>' +
          '<td>' +
            '<div class="file-name">' + escapeHtml(file.originalName) + '</div>' +
            '<div style="font-size:.85rem; color: var(--muted); margin-top:6px;">' + escapeHtml(file.path) + '</div>' +
          '</td>' +
          '<td><div class="identified-name">' + escapeHtml(file.identifiedName) + '</div></td>' +
          '<td>' +
            '<span class="media-type ' + file.mediaType + '">' + (file.mediaType==='movie' ? '电影' : '电视剧') + '</span>' +
            seasonEpisode +
          '</td>' +
          '<td>' + ratingHtml + '</td>' +
          '<td><span class="match-status ' + file.matchStatus + '">' + matchText + '</span></td>' +
        '</tr>'
      );
    });

    tbody.innerHTML = rows.join('');
  }

  function filterFiles(filterType, searchTerm){
    var term = String(searchTerm||'').toLowerCase();
    filteredFiles = allFiles.filter(function(file){
      var typeMatch = true;
      if (filterType==='movie') typeMatch = file.mediaType==='movie';
      else if (filterType==='tv') typeMatch = file.mediaType==='tv';
      else if (filterType==='success') typeMatch = file.matchStatus==='success';
      else if (filterType==='failed') typeMatch = file.matchStatus==='failed';

      var searchMatch = true;
      if (term){
        searchMatch = (String(file.originalName).toLowerCase().indexOf(term)!==-1) ||
                      (String(file.identifiedName).toLowerCase().indexOf(term)!==-1);
      }
      return typeMatch && searchMatch;
    });
    renderTable();
  }

  document.addEventListener('DOMContentLoaded', function(){
    initializeData();

    Array.prototype.forEach.call(document.querySelectorAll('.filter-btn'), function(btn){
      btn.addEventListener('click', function(){
        Array.prototype.forEach.call(document.querySelectorAll('.filter-btn'), function(b){ b.classList.remove('active'); });
        this.classList.add('active');
        var filterType = this.getAttribute('data-filter');
        var searchTerm = document.getElementById('searchInput').value;
        filterFiles(filterType, searchTerm);
      });
    });

    var searchInput = document.getElementById('searchInput');
    if (searchInput){
      searchInput.addEventListener('input', function(){
        var activeBtn = document.querySelector('.filter-btn.active');
        var activeFilter = activeBtn ? activeBtn.getAttribute('data-filter') : 'all';
        filterFiles(activeFilter, this.value);
      });
    }
  });
</script>